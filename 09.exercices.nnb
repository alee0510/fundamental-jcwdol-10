{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "// function -> block code {} -> membungkus logic, code, atau instruction yang bisa dipanggil berulang-ulang\n// purpose -> to make our code more organized, modular, reusable and easier to read\n\n\n// logic -> console.log('Hello World'); 10x\nconsole.log('Hello World');\nconsole.log('Hello World');\nconsole.log('Hello World');\nconsole.log('Hello World');\nconsole.log('Hello World');\n// ...\n\n// for loop\nfor (let i = 0; i < 10; i++) {\n  console.log('Hello World');\n}\n\n// function\nfunction sayHello10times () {\n    for (let i = 0; i < 10; i++) {\n        console.log('Hello World');\n    }\n}\n\n// ....\n// call the function\nsayHello10times()\n\ndisplayString()\n// modify the function to make it more universal\nfunction displayString (str = \"\", n_times = 0) {\n    for (let i = 0; i < n_times; i++) {\n        console.log(str)\n    }\n}\n\n// call the function\ndisplayString()\ndisplayString(\"Hello\", 5)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Quiz 2 :\nfunction divisibleSumPairs (arrays, n, k) {\n    let pair = 0\n    for ( let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if ((arrays[i] + arrays[j]) % k === 0) {\n                console.log(arrays[i], arrays[j])\n                pair += 1\n            }\n        }\n    }\n\n    return pair\n}\n\nconsole.log(divisibleSumPairs([1, 3, 2, 6, 1, 2], 6, 3)) // 5"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Quiz 4 :\nfunction biggerIsGreater (words) {\n    if (words.length <= 1) return 'no answer'\n    if (words.length === 2) {\n        if (words[0] < words[1]) return words[1] + words[0]\n        return 'no answer'\n    }\n\n    if (words[words.length - 1] > words[words.length - 2]) {\n        return words.slice(0, words.length - 2) + words[words.length - 1] + words[words.length - 2]\n    }\n\n    let firstChar = words[0]\n    let sortedChar = words.split('').sort()\n    if (firstChar === sortedChar[sortedChar.length - 1]) return 'no answer'\n\n    let newFirstChar = sortedChar.splice(sortedChar.indexOf(firstChar) + 1, 1)\n    return newFirstChar + sortedChar.join(\"\") \n}\n\nconsole.log(biggerIsGreater('a')) // no answer\nconsole.log(biggerIsGreater('ab')) // ba\nconsole.log(biggerIsGreater('bb')) // no answer\nconsole.log(biggerIsGreater('hefg')) // hegf\nconsole.log(biggerIsGreater('dhck')) // dhkc\nconsole.log(biggerIsGreater('dkhc')) // hcdk\nconsole.log(biggerIsGreater('fedcbabcd')) // fedcbabdc\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Problem 1\nclass Employee {\n    constructor(_name, _salary) {\n        this.name = _name\n        this.salary = _salary\n    }\n\n    getSalary () {\n        return this.salary\n    }\n}\nconst NewEmployee = new Employee(\"Andre\", 0)\n\nclass FullTimeEmployee extends Employee {\n    constructor(_name, _salary) {\n        super(_name, _salary)\n    }\n\n    workingHourPerDay (hours) {\n        if (hours >= 6) {\n            this.salary += 600000 + ((hours - 6) * 75000)\n            return\n        }\n        this.salary += 100000 * hours\n    }\n}\n\nclass PartTimeEmployee extends Employee {\n    constructor(_name, _salary) {\n        super(_name, _salary)\n    }\n\n    workingHourPerDay (hours) {\n        if (hours >= 6) {\n            this.salary += 300000 + ((hours - 6) * 30000)\n            return\n        }\n        this.salary += 50000 * hours\n    }\n}\n\n\n// implementasi\nconst fullTimeEmployee = new FullTimeEmployee('John', 0)\nconst partTimeEmployee = new PartTimeEmployee('Doe', 0)\n\nfullTimeEmployee.workingHourPerDay(8)\nfullTimeEmployee.workingHourPerDay(4)\n\npartTimeEmployee.workingHourPerDay(8)\npartTimeEmployee.workingHourPerDay(4)\n\nconsole.log(fullTimeEmployee.getSalary()) // 600000\nconsole.log(partTimeEmployee.getSalary()) // 240000"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// Problem Shooting Game\nclass Player {\n    constructor(_name, _health, _power) {\n        this.name = _name\n        this.health = _health\n        this.power = _power\n    }\n\n    hit (player) {\n        player.health -= this.power\n    }\n\n    useItem (item) { //e.x { health: 10, power: 10 }\n        this.health += item?.health\n        this.power += item?.power\n    }\n\n    getStatus () {\n        console.log(`${this.name} => health: ${this.health} && power: ${this.power}`)\n    }\n}\n\nclass ShootingGame {\n    constructor(_player1, _player2) {\n        this.player1 = _player1\n        this.player2 = _player2\n    }\n\n    getRandomItem () {\n        return {\n            health: Math.floor(Math.random() * 10),\n            power: Math.floor(Math.random() * 10)\n        }\n    }\n\n    start () {\n        // start the game\n        while(this.player1?.health > 0 && this.player2?.health > 0) {\n            // show status\n            this.player1?.getStatus()\n            this.player2?.getStatus()\n\n            // get random item\n            this.player1?.useItem(this.getRandomItem())\n            this.player2?.useItem(this.getRandomItem())\n\n            // shot\n            this.player1?.hit(this.player2)\n            this.player2?.hit(this.player1)\n        }\n\n        // show the winner\n        if (this.player1?.health > 0) {\n            console.log(`${this.player1.name} is the winner`)\n            return\n        }\n        console.log(`${this.player2.name} is the winner`)\n    }\n}\n\n// create a player\nconst player1 = new Player('Andre', 100, 10)\nconst player2 = new Player('John', 100, 10)\n\n// create a game\nconst shootingGame = new ShootingGame(player1, player2)\nconsole.log(shootingGame)\nshootingGame.start()"
            ],
            "outputs": []
        }
    ]
}